/* Kevin Vu, CS33 PEXEX Lab, Fall 2015 */

01. Explain why the instructions in the trace did not produce the correct mathematical result. Which instructions caused the problem, exactly?
The correct mathematical result did not occur from the instructions in the trace since the Lisp objects are only 62 bits long. In the 62 bit case, the computation results in an overflow. In the 64 bit case, this is not necessarily an overflow. More specifically, the instruction that led to this error was lea 0x0(,%rbp,4), %rax in which the multiplicated becomes bigger than anticipated.

02. Explain why the shell command emacs -batch -eval '(print most-positive-fixnum)' outputs 2305843009213693951. Where did the number 2305843009213693951 come from? Explain in terms of the Emacs source code.
2305843009213693951 if rewritten as 2^61-1, sheds more light on why this was outputed. Examining the source code contents of lisp.h has '#define MOST_POSITIVE_FIXNUM (EMACS_INT_MAX >> INTTYPEBITS).' In a 64 bit machine, this would be 0x7fffffffffffffff shifted right INTTYPEBITS or also GCTYPEBITS-1. GCTYPEBITS is 3 so 0x7fffffffffffffff is shifted right by 2. EMACS_INT_MAX is shifted right by 2. This is going to be 2^61-1 and thus why the shell command outputs this.


03. Explain why the shell command emacs -batch -eval '(print (* most-positive-fixnum most-positive-fixnum))' outputs only 1.
When squaring numbers, bit shifting occurs first then adding one. When squaring most-postitive-fixnum, the shift will result in 0 and adding 1 will essentially make the result out to be 1.


04. The Emacs executable was compiled with GCC's -O2 option. Suppose it had also been compiled with -fsanitize=undefined. Explain any problems the trace would run into, or if there would not be a problem explain why not.
Running with -fsanitize=undefine, a diagnostic message would appear every encounter of overflow at runtime. Execution won't be halted, but continued. This flag doesn't change anything since no overflow was found in the trace.

05. Similarly, discuss whether and how -fwrapv would have caused problems.
Running with -fwrapv, arithmetic operations would just continue and if there was overflow it would wrap around using the 2's complement mechanism. There would not be problems as no overflow was encountered in the trace.

06. Suppose we assume -fwrapv is used. Suggest changes to how Emacs does integer multiplication that should help improve its performance. Focus on integer multiplication; don't alter the machinery Emacs uses to decide which flavor of multiplication to do.
If -fwrapv is assumed to be used, the overflow checks would be unnecessary. As such, we would just solely multiply instead.


07. How significant are the efficiency differences discussed above, in the context of Emacs execution?
It won't make a significant difference in efficiency: there are less than 4 (2-3) switch statement checks of OF. The speed may potentially raise, but nothing too drastic.
